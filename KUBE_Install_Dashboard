#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# ---
# RightScript Name: KUBE Install Dashboard
# Inputs:
#   MY_IP:
#     Category: RightScale
#     Input Type: single
#     Required: true
#     Advanced: true
#     Default: env:PRIVATE_IP
# Attachments: []
# ...

# cat << EOF | kubectl create -f -
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: kube-system
# EOF

function tag_and_verify()
{
  local  tag=$1
  echo "Adding server tag: $tag"

  rs_api_cmd="rsc"

  i="0"
  while [ $i -lt 3 ]
  do

    # Use the RL10 proxy to access the api
    echo "ADD TAG COMMAND: ${rs_api_cmd} --rl10 cm15 multi_add /api/tags/multi_add \"resource_hrefs[]=$RS_SELF_HREF\" \"tags[]=$tag\""
    ${rs_api_cmd} --rl10 cm15 multi_add /api/tags/multi_add "resource_hrefs[]=$RS_SELF_HREF" "tags[]=$tag"

    sleep 3
    current_tag=$(${rs_api_cmd} --pp --rl10 cm15 by_resource /api/tags/by_resource "resource_hrefs[]=$RS_SELF_HREF" | grep "$tag" || true)

    if test "$current_tag" = "" ; then
      echo "[$i] Failed to add tag. Sleep and retry..."
    else
      echo "[$i] Successfully added tag."
      break
    fi

   sleep 5
   i=$((i+1))
 done
}

set +e
read -r -d '' manifest << EOF
kind: List
apiVersion: v1
items:
- kind: ReplicationController
  apiVersion: v1
  metadata:
    labels:
      app: kubernetes-dashboard
      version: v1.0.1
    name: kubernetes-dashboard
    namespace: kube-system
  spec:
    replicas: 1
    selector:
      app: kubernetes-dashboard
    template:
      metadata:
        labels:
          app: kubernetes-dashboard
      spec:
        containers:
        - name: kubernetes-dashboard
          image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.0.1
          imagePullPolicy: Always
          ports:
          - containerPort: 9090
            protocol: TCP
          args:
            - --apiserver-host=http://$MY_IP:8080
          livenessProbe:
            httpGet:
              path: /
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: kubernetes-dashboard
      kubernetes.io/cluster-service: "true"
    name: kubernetes-dashboard
    namespace: kube-system
  spec:
    type: NodePort
    ports:
    - port: 80
      targetPort: 9090
    selector:
      app: kubernetes-dashboard
EOF
set -e

output=$(echo "$manifest" | /opt/kubernetes/server/bin/kubectl create -f -)
echo "$output"

port=$(echo "$output" | grep -P '\(tcp:\d+\)' | cut -d':' -f 2 | cut -d ')' -f 1)
tag_and_verify "kube:dashboard_port=$port"
